<languageVersion : 1.0;>

kernel YBMapping
<   namespace : "at.leichtgewicht.color";
    vendor : "Martin Heidegger";
    version : 1;
    description : "YB Mapping - RYB Color Space";
>
{
    input image4 src;
    
    parameter float2 size
    <
        minValue : float2(0.0,0.0);
        defaultValue : float2(200.0, 200.0);
    >;
    
    parameter float r
    <
        minValue: float( 0.0 );
        maxValue: float( 1.0 );
        defaultValue: float( 0.8 );
    >;
    
    parameter float alpha
    <
        minValue: float( 0.0 );
        maxValue: float( 1.0 );
        defaultValue: float( 1.0 );
    >;
    
    output pixel4 dst;

    void
    evaluatePixel()
    {
        float2 coord = outCoord();
        if( coord.x < size.x && coord.y < size.y ) {
            
            float r2 = r;
            float y2 = ( coord.x / size.x );
            float b2 = ( coord.y / size.y );
            
            // Remove the whiteness from the color.
            float w = min( r2, min( y2, b2 ) );
            
            r2 = r2 - w;
            y2 = y2 - w;
            b2 = b2 - w;
		
            float my = max( r2, max( y2, b2 ) );
		
            // Get the green out of the yellow and blue
            float g2 = min( y2, b2 );
            y2 -= g2;
            b2 -= g2;
            
            b2 *= 2.0;
            g2 *= 2.0;
		
            // Redistribute the remaining yellow.
            r2 += y2;
            g2 += y2;
		
            // Normalize to values.
            float mg = max( r2, max( g2, b2 ) );
		
            if( mg > 0.0 ) {
                float n = my / mg;
                r2 *= n;
                g2 *= n;
                b2 *= n;
            }
		
            // Add the white back in.
            r2 += w;
            g2 += w;
            b2 += w;
        
            dst = mix(
                sampleLinear(src, coord ),
                float4( r2, g2, b2, 1.0),
                alpha
            );
        } else {
            dst = sampleLinear(src, coord );
        }
    }
}
